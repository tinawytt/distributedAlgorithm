# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import a_pb2 as a__pb2


class BlockChainStub(object):
    """blockchain service and the function definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.new_genesis_block = channel.unary_unary(
                '/BlockChain/new_genesis_block',
                request_serializer=a__pb2.new_genesis_block_request.SerializeToString,
                response_deserializer=a__pb2.new_genesis_block_request.FromString,
                )
        self.new_block = channel.unary_unary(
                '/BlockChain/new_block',
                request_serializer=a__pb2.new_block_request.SerializeToString,
                response_deserializer=a__pb2.new_block_response.FromString,
                )
        self.query_blockchain = channel.unary_unary(
                '/BlockChain/query_blockchain',
                request_serializer=a__pb2.query_blockchain_request.SerializeToString,
                response_deserializer=a__pb2.query_blockchain_response.FromString,
                )
        self.StartEvent = channel.unary_unary(
                '/BlockChain/StartEvent',
                request_serializer=a__pb2.StartEventRequest.SerializeToString,
                response_deserializer=a__pb2.StartEventResponse.FromString,
                )


class BlockChainServicer(object):
    """blockchain service and the function definition
    """

    def new_genesis_block(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def new_block(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_blockchain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlockChainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'new_genesis_block': grpc.unary_unary_rpc_method_handler(
                    servicer.new_genesis_block,
                    request_deserializer=a__pb2.new_genesis_block_request.FromString,
                    response_serializer=a__pb2.new_genesis_block_request.SerializeToString,
            ),
            'new_block': grpc.unary_unary_rpc_method_handler(
                    servicer.new_block,
                    request_deserializer=a__pb2.new_block_request.FromString,
                    response_serializer=a__pb2.new_block_response.SerializeToString,
            ),
            'query_blockchain': grpc.unary_unary_rpc_method_handler(
                    servicer.query_blockchain,
                    request_deserializer=a__pb2.query_blockchain_request.FromString,
                    response_serializer=a__pb2.query_blockchain_response.SerializeToString,
            ),
            'StartEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.StartEvent,
                    request_deserializer=a__pb2.StartEventRequest.FromString,
                    response_serializer=a__pb2.StartEventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BlockChain', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BlockChain(object):
    """blockchain service and the function definition
    """

    @staticmethod
    def new_genesis_block(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BlockChain/new_genesis_block',
            a__pb2.new_genesis_block_request.SerializeToString,
            a__pb2.new_genesis_block_request.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def new_block(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BlockChain/new_block',
            a__pb2.new_block_request.SerializeToString,
            a__pb2.new_block_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_blockchain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BlockChain/query_blockchain',
            a__pb2.query_blockchain_request.SerializeToString,
            a__pb2.query_blockchain_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BlockChain/StartEvent',
            a__pb2.StartEventRequest.SerializeToString,
            a__pb2.StartEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
